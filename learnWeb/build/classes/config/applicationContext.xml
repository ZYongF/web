<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c='http://www.springframework.org/schema/c'
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	 http://www.springframework.org/schema/context 
	 http://www.springframework.org/schema/context/spring-context-3.0.xsd
	 http://www.springframework.org/schema/tx 
	 http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	 http://www.springframework.org/schema/cache 
	 http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
	 http://www.springframework.org/schema/aop 
	 http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	 http://www.springframework.org/schema/jee 
	 http://www.springframework.org/schema/jee/spring-jee-3.0.xsd">

	<context:annotation-config />
	<context:component-scan base-package="com.sxt.*" />
	<!-- cache key  -->
	<cache:annotation-driven cache-manager="cacheManager" key-generator="keyGenerator"/>
	<bean id="keyGenerator" class="com.sxt.util.CacheKeyGenerator"/>
	
	<!-- properties 配置 -->
    <bean id="placeholderConfig"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/config/database.properties</value>
                <value>classpath:/config/scheduler.properties</value>
                <value>classpath:/config/redis.properties</value>
            </list>
        </property>
    </bean>
	<!-- dataSource 配置  -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.url}" p:username="${jdbc.username}" p:password="${jdbc.password}"
		p:maxActive="${jdbc.maxActive}" p:maxIdle="${jdbc.maxIdle}" p:maxWait="10" p:poolPreparedStatements="false" p:defaultAutoCommit="true"
		p:validationQuery="select 1 from dual" p:testOnBorrow="true" p:testWhileIdle ="true" p:removeAbandoned="true" p:removeAbandonedTimeout="180" 
		p:timeBetweenEvictionRunsMillis="30000"  p:numTestsPerEvictionRun="${jdbc.maxActive}">
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--dataSource属性指定要用到的连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!--configLocation属性指定mybatis的核心配置文件 -->
		<property name="configLocation" value="classpath:config/Configuration.xml" />
		<!-- 所有配置的mapper文件 -->
		<property name="mapperLocations" value="classpath*:com/sxt/mapper/*.xml" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sxt.inter" />
	</bean>
	<!-- dataSource transaction 配置  -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
    
    <tx:annotation-driven transaction-manager="transactionManager"/>  
	
	<!-- kaptcha image code 配置  -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.border">no</prop>
						<prop key="kaptcha.border.color">105,179,90</prop>
						<prop key="kaptcha.textproducer.font.color">red</prop>
						<prop key="kaptcha.image.width">200</prop>
						<prop key="kaptcha.textproducer.font.size">70</prop>
						<prop key="kaptcha.image.height">90</prop>
						<prop key="kaptcha.session.key">code</prop>
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>
	
	<!--定时任务-->
	<bean id="borrowPlanBatchService" class="com.sxt.service.batch.BorrowPlanBatchJob"></bean>
    <bean id="borrowPlanBatchJob"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="borrowPlanBatchService"/>
        <property name="targetMethod" value="batch"/>
        <property name="concurrent" value="false"/>
        <property name="group" value="job"/>
    </bean>

    <bean id="borrowPlanTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="borrowPlanBatchJob"/>
        <property name="cronExpression">
            <value>${scheduler.borrow.plan.job}</value>
        </property>
    </bean>
    
    <!-- redis 配置-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="minIdle" value="${redis.minIdle}"/>
        <property name="maxTotal" value="${redis.maxActive}"/>
    </bean>
    
    <bean id="java-jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="poolConfig"/>
        <constructor-arg index="1" value="${redis.host}"/>
        <constructor-arg index="2" value="${redis.port}" type="int"/>
        <constructor-arg index="3" value="${redis.defaultExpireTime}" type="int"/>
        <constructor-arg index="4" value="${redis.pass}"/>
    </bean>
	
	 <bean class="com.sxt.util.JedisUtil">
        <property name="jedisPool" ref="java-jedisPool"/>
    </bean>

    <bean id="connectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}">
        <property name="poolConfig" ref="poolConfig"/>
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>

   

    <bean id="redisExpiresMap" class="java.util.HashMap">
        <constructor-arg index="0" type="java.util.Map">
            <map key-type="java.lang.String" value-type="java.lang.Long">
                <entry key="area_cache" value="86400"/>
                <entry key="parameter_cache" value="180"/>
                <entry key="statistic_cache" value="3600"/>
                <entry key="image_cache" value="86400"/>
                <entry key="rss_cache" value="7200"/>
                <entry key="channel_cache" value="86400"/>
                <entry key="page_cache" value="86400"/>
                <entry key="content_type_cache" value="86400"/>
            </map>
        </constructor-arg>
    </bean>

    <bean id='cacheManager'
          class='org.springframework.data.redis.cache.RedisCacheManager'
          c:template-ref='redisTemplate'
          p:defaultExpiration="${redis.defaultExpireTime}"
          p:expires-ref="redisExpiresMap"/>
    
</beans>